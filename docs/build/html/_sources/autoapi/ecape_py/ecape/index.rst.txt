:py:mod:`ecape_py.ecape`
========================

.. py:module:: ecape_py.ecape

.. autoapi-nested-parse::

   Calculate the entraining CAPE (ECAPE) of a parcel



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   ecape_py.ecape._get_parcel_profile
   ecape_py.ecape.calc_lfc_height
   ecape_py.ecape.calc_el_height
   ecape_py.ecape.calc_sr_wind
   ecape_py.ecape.calc_mse
   ecape_py.ecape.calc_integral_arg
   ecape_py.ecape.calc_ncape
   ecape_py.ecape.calc_ecape_a
   ecape_py.ecape.calc_psi
   ecape_py.ecape.calc_ecape



Attributes
~~~~~~~~~~

.. autoapisummary::

   ecape_py.ecape.PintList


.. py:data:: PintList

   

.. py:function:: _get_parcel_profile(pressure: PintList, temperature: PintList, dew_point_temperature: PintList, parcel_func: Callable = None) -> PintList

   Retrieve a parcel's temperature profile.

   :param pressure: Total atmospheric pressure
   :param temperature: Air temperature
   :param dew_point_temperature: Dew point temperature
   :param parcel_func: parcel profile retrieval callable via MetPy

   :returns: parcel_profile


.. py:function:: calc_lfc_height(pressure: PintList, height: PintList, temperature: PintList, dew_point_temperature: PintList, parcel_func: Callable) -> Tuple[int, pint.Quantity]

   Retrieve a parcel's level of free convection (lfc).

   :param pressure: Total atmospheric pressure
   :param height: Atmospheric heights at the levels given by 'pressure'.
   :param temperature: Air temperature
   :param dew_point_temperature: Dew point temperature
   :param parcel_func: parcel profile retrieval callable via MetPy

   :returns:     index of the last instance of negative buoyancy below the lfc
             lfc_z:
                 height of the last instance of negative buoyancy below the lfc
   :rtype: lfc


.. py:function:: calc_el_height(pressure: PintList, height: PintList, temperature: PintList, dew_point_temperature: PintList, parcel_func: Callable) -> Tuple[int, pint.Quantity]

   Retrieve a parcel's equilibrium level (el).

   :param pressure: Total atmospheric pressure
   :param height: Atmospheric heights at the levels given by 'pressure'.
   :param temperature: Air temperature
   :param dew_point_temperature: Dew point temperature
   :param parcel_func: parcel profile retrieval callable via MetPy

   :returns:     index of the last instance of positive buoyancy below the el
             el_z:
                 height of the last instance of positive buoyancy below the el
   :rtype: el_idx


.. py:function:: calc_sr_wind(pressure: PintList, u_wind: PintList, v_wind: PintList, height: PintList) -> pint.Quantity

   Calculate the mean storm relative (as compared to Bunkers right motion) wind magnitude in the 0-1 km AGL layer

   :param pressure: Total atmospheric pressure
   :param u_wind: X component of the wind
   :param v_wind: Y component of the wind
   :param height: Atmospheric heights at the levels given by 'pressure'.

   :returns:     0-1 km AGL average storm relative wind magnitude
   :rtype: sr_wind


.. py:function:: calc_mse(pressure: PintList, height: PintList, temperature: PintList, specific_humidity: PintList) -> Tuple[PintList, PintList]

   :param pressure: Total atmospheric pressure
   :param height: Atmospheric heights at the levels given by 'pressure'.
   :param temperature: Air temperature
   :param specific_humidity: Specific humidity

   :returns:     Mean moist static energy from the surface to a layer
             moist_static_energy_star:
                 Saturated moist static energy
   :rtype: moist_static_energy_bar


.. py:function:: calc_integral_arg(moist_static_energy_bar, moist_static_energy_star, temperature) -> PintList

   Calculate the contents of the integral defined in the NCAPE equation (54).

   :param moist_static_energy_bar: Mean moist static energy from the surface to a layer
   :param moist_static_energy_star: Saturated moist static energy
   :param temperature: Air temperature

   :returns:     Contents of integral defined in NCAPE eqn. 54
   :rtype: integral_arg


.. py:function:: calc_ncape(integral_arg: PintList, height: PintList, lfc_idx: int, el_idx: int) -> pint.Quantity

   Calculate the buoyancy dilution potential (NCAPE)

   :param integral_arg: Contents of integral defined in NCAPE eqn. 54
   :param height: Atmospheric heights at the levels given by 'pressure'.
   :param lfc_idx: Index of the last instance of negative buoyancy below the lfc
   :param el_idx: Index of the last instance of positive buoyancy below the el

   :returns:     Buoyancy dilution potential of the free troposphere (eqn. 54)
   :rtype: ncape


.. py:function:: calc_ecape_a(sr_wind: PintList, psi: pint.Quantity, ncape: pint.Quantity, cape: pint.Quantity) -> pint.Quantity

   Calculate the entraining cape of a parcel

   :param sr_wind: 0-1 km AGL average storm relative wind magnitude
   :param psi: Parameter defined in eqn. 52, constant for a given equilibrium level
   :param ncape: Buoyancy dilution potential of the free troposphere (eqn. 54)
   :param cape: Convective available potential energy (CAPE, user-defined type)

   :returns:     Entraining CAPE (eqn. 55)
   :rtype: ecape


.. py:function:: calc_psi(el_z: pint.Quantity) -> pint.Quantity

   Calculate the constant psi as denoted in eqn. 52

   :param el_z: height of the last instance of positive buoyancy below the el

   :returns:     Parameter defined in eqn. 52, constant for a given equilibrium level, see COMPUTE_ECAPE.m L88 (pitchfork)
   :rtype: psi


.. py:function:: calc_ecape(height: PintList, pressure: PintList, temperature: PintList, specific_humidity: PintList, u_wind: PintList, v_wind: PintList, cape_type: str = 'most_unstable') -> pint.Quantity

   Calculate the entraining CAPE (ECAPE) of a parcel

   Parameters:
   ----------
       height:
           Atmospheric heights at the levels given by 'pressure'.
       pressure:
           Total atmospheric pressure
       temperature:
           Air temperature
       specific humidity:
           Specific humidity
       u_wind:
           X component of the wind
       v_wind
           Y component of the wind
       cape_type:
           Variation of CAPE desired. 'most_unstable' (default), 'surface_based', or 'mixed_layer'

   Returns:
   ----------
       ecape : 'pint.Quantity'
           Entraining CAPE


